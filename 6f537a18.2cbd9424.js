(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{108:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return l})),r.d(t,"default",(function(){return s}));var n=r(3),o=r(7),a=(r(0),r(173)),i={id:"dual_color_6_suits",title:"Specific Conventions for Dual-Color (6 Suits)"},c={unversionedId:"variant_specific/dual_color_6_suits",id:"variant_specific/dual_color_6_suits",isDocsHomePage:!1,title:"Specific Conventions for Dual-Color (6 Suits)",description:'These conventions apply to the "Dual-Color (6 Suits)" variant.',source:"@site/docs/variant_specific/dual_color_6_suits.md",slug:"/variant_specific/dual_color_6_suits",permalink:"/docs/variant_specific/dual_color_6_suits",editUrl:"https://github.com/hanabi/hanabi.github.io/edit/main/docs/variant_specific/dual_color_6_suits.md",version:"current"},l=[{value:"The Negative Prompt",id:"the-negative-prompt",children:[]},{value:"Order Chop Move Change",id:"order-chop-move-change",children:[]}],u={toc:l};function s(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},u,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,'These conventions apply to the "Dual-Color (6 Suits)" variant.'),Object(a.b)("br",null),Object(a.b)("h3",{id:"the-negative-prompt"},"The Negative Prompt"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"In this variant, since negative color information conveys just as much information as positive color information, you should include that when deciding which card to play into a ",Object(a.b)("em",{parentName:"li"},"Prompt"),"."),Object(a.b)("li",{parentName:"ul"},"For example:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"Alice has a red card in slot 1 and a red card in slot 2."),Object(a.b)("li",{parentName:"ul"},"Alice is ",Object(a.b)("em",{parentName:"li"},"Prompted")," for a mahogany 2. (Mahogany is composed of red and black.)"),Object(a.b)("li",{parentName:"ul"},"Normally, Alice would play slot 1, since ",Object(a.b)("em",{parentName:"li"},"Prompts")," promise the left-most card."),Object(a.b)("li",{parentName:"ul"},"However, Alice's slot 1 card has no negative clues, and her slot 2 card has a negative yellow clue."),Object(a.b)("li",{parentName:"ul"},"Thus, this is a ",Object(a.b)("em",{parentName:"li"},"Negative Prompt")," and Alice plays slot 2 instead of slot 1.")))),Object(a.b)("h3",{id:"order-chop-move-change"},"Order Chop Move Change"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Normally, ",Object(a.b)("em",{parentName:"li"},"Order Chop Moves"),', are "turned off" when two different 1\'s have different positive clues on them.',Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},'For example, Order Chop Moves would be "turned off" in the situation where Alice has one 1 has a positive 1 clue on it, and Alice has another 1 with a positive 1 clue on it and a positive red clue on it.'))),Object(a.b)("li",{parentName:"ul"},'In the "Dual Color (6 Suit)" variant, ',Object(a.b)("em",{parentName:"li"},"Order Chop Moves")," are never turned off when there are two different 1's, regardless of different positive or negative color clues on them."),Object(a.b)("li",{parentName:"ul"},'The only exception is when the exact identity of the 1 is known (e.g. from being completely "filled in"). In this situation, ',Object(a.b)("em",{parentName:"li"},"Order Chop Moves")," are turned off.")))}s.isMDXComponent=!0},173:function(e,t,r){"use strict";r.d(t,"a",(function(){return p})),r.d(t,"b",(function(){return m}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=o.a.createContext({}),s=function(e){var t=o.a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},p=function(e){var t=s(e.components);return o.a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(r),b=n,m=p["".concat(i,".").concat(b)]||p[b]||d[b]||a;return r?o.a.createElement(m,c(c({ref:t},u),{},{components:r})):o.a.createElement(m,c({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=b;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var u=2;u<a;u++)i[u]=r[u];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}b.displayName="MDXCreateElement"}}]);